library(GenomicRanges)
library(genomation)
library(rtracklayer)
library(RColorBrewer)
library(BSgenome)

#setwd("Path_to_a_directory_higher_than_data")
colfunc <- colorRampPalette(c("yellow","blue"))

#load data
DSMF<- import.bw("../Bigwiggle/sevinc/sm_allCs_combined_M_ucsc.bw")

#Load the feature files
alltss_chrA<- import("../featurefiles/alltss_chrA.gtf", "gtf")
seqlevels(alltss_chrA)<- paste0("chr", seqlevels(alltss_chrA))
alltss_chrX<- import("../featurefiles/alltss_chrX.gtf", "gtf")
seqlevels(alltss_chrX)<- paste0("chr", seqlevels(alltss_chrX))
#seqlevels(rexsites)<- nochr
#Extend gr to 1000bp on each side of the rex sites
flanking_tss_A <- resize(alltss_chrA, 2000, fix="center", use.names=TRUE)
flanking_tss_X <- resize(alltss_chrX, 2000, fix="center", use.names=TRUE)


#Make score matrix
sm_DSMF_TSSA = ScoreMatrix(target = DSMF,
                           windows = flanking_tss_A,
                           strand.aware = TRUE, weight.col = "score")
sm_DSMF_TSSX = ScoreMatrix(target = DSMF,
                           windows = flanking_tss_X,
                           strand.aware = TRUE, weight.col = "score")
saveRDS(sm_DSMF_TSSA, "../featurefiles/sm_DSMF_TSSA.RDS")
saveRDS(sm_DSMF_TSSX, "../featurefiles/sm_DSMF_TSSX.RDS")

#Heatmap plots
#heatMatrix(sm_DSMF_TSSA,
 #          xcoords = c(-1000,1000),
  #         winsorize = c(1,99),
   #        col = colfunc(10))
#heatMatrix(sm_DSMF_TSSX,
 #          xcoords = c(-1000,1000),
  #         winsorize = c(1,99),
   #        col = colfunc(10))
################################################################################################
#######Plotting with ggplot####################################################################
#data <- readRDS("../featurefiles/sm_DSMF_TSSA.RDS")
data <- readRDS("../featurefiles/sm_DSMF_TSSX.RDS")
library(ggplot2)
library(genomation)
library(tidyr)
####################################################
# Plotting function for genomation ScoreMatrix     #
####################################################
#' @importFrom ggplot2 ggplot
#' @importFrom genomation ScoreMatrix
#' @importFrom tidyr gather
#' @param data   \code {genomation} ScoreMatrix of dSMF values[0-1]
#' @param myYlab {text} Y label for graph
#' @param myXlab {text} X label for graph
#' @param feature_label {text} middle value on which windowns are aligned to
#' @param title {text} graph titleDistance between the starts of consecutive windows
#' 
plotAveragedSMF<-function(data,         #genomation ScoreMatrix
                          myYlab,       #label for Y axis (type of loci)
                          myXlab="CpG/GpC position", #label for X axis
                          feature_label="rex",
                          title=NULL)
{
  #Transform genomation matrix to data frame
  df <- as.data.frame(data)
  #Remove 0 values
  df[df==0] <- NA
  #rename columns, get number of columns
  colnames(df)<-as.numeric(gsub("V","",colnames(df)))
  width_data <- max(as.numeric(colnames(df)))
  #name samples
  rownames(df)<- as.numeric(rownames(df))
  #prepare data for plotting
  d<- tidyr::gather(df,key=position, value=methylation)
  d$molecules<-rownames(df)
  d$position<-as.numeric(d$position)
  
  p <- ggplot2::ggplot(d,aes(x=position,y=molecules,width=1)) +
    ggplot2::geom_tile(aes(width=1,fill=methylation)) +
    ggplot2::scale_fill_gradientn(values = c(0,1),
                                  colors=c("yellow", "red"),
                                  na.value="black") +
    ggplot2::theme(panel.background = element_rect(fill="black"),
                   panel.grid.major = element_blank(),
                   panel.grid.minor = element_blank(),
                   axis.text.y = element_blank(),
                   axis.ticks.y =  element_blank(),
                   plot.title = element_text(face = "bold",hjust = 0.5)) +
    # ggplot2::guides(colour=guide_colorbar(),
    #       fill = guide_legend(title="dSMF", 
    #                          title.position="top")) + 
    ggplot2::scale_x_continuous(name=myXlab, 
                                limits = c(0,width_data),
                                expand=c(0,0),
                                breaks=c(0,width_data/2,width_data),
                                labels=c(paste0("-",width_data/2),feature_label,paste0(width_data/2))) + 
    ggplot2::ylab(myYlab) + 
    ggplot2::ggtitle(title)
  return(p)
}

pdf("dSMF_at_XTSS.pdf")
plotAveragedSMF(data,myYlab="Genes",myXlab="Position",feature_label="TSS",title="dSMF at X TSS")
dev.off()

